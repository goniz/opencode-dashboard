# .github/workflows/auto-fix-ci-with-claude.yml
name: Auto-fix CI (PRs only, /autofix âžœ auto-fix label)

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  id-token: write

env:
  ENABLE_PHRASE: "/autofix"
  ENABLE_LABEL: "auto-fix"
  CI_WORKFLOW_NAME: "CI"

concurrency:
  group: auto-fix-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  # 1) Gate on CI failure for PRs only: require 'auto-fix' label before doing anything
  gate_on_failure:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine PR for failing run
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          HEAD_OWNER: ${{ github.event.workflow_run.head_repository.owner.login }}
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          set -euo pipefail
          QUERY_PATH="repos/$REPO/pulls?state=open&head=${HEAD_OWNER}:${HEAD_BRANCH}"
          PR_NUMBER=$(gh api "$QUERY_PATH" --jq '.[0].number // empty' || echo "")
          echo "pr_number=${PR_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Stop if no PR open
        if: ${{ steps.pr.outputs.pr_number == '' }}
        run: echo "No open PR found for this failing run. Exiting."

      - name: Check for 'auto-fix' label; post reminder if missing
        if: ${{ steps.pr.outputs.pr_number != '' }}
        id: gate
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ steps.pr.outputs.pr_number }}
          ENABLE_LABEL: ${{ env.ENABLE_LABEL }}
          ENABLE_PHRASE: ${{ env.ENABLE_PHRASE }}
        run: |
          set -euo pipefail
          if gh api "repos/$REPO/issues/$PR_NUMBER/labels" --jq '.[].name' | grep -Fxq "$ENABLE_LABEL"; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            gh api repos/$REPO/issues/$PR_NUMBER/comments -f body=$'CI has failed for this PR.\nTo enable auto-fix, please comment `/autofix` on this PR (top-level comment or review). I will label the PR `auto-fix` and proceed when CI is failing.'
            echo "enabled=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop here (gated by label)
        if: ${{ steps.gate.outputs.enabled != 'true' }}
        run: echo "Enable label not present. Stopping."

  # 2) On comment/review containing '/autofix': add label 'auto-fix', then (if CI failed) proceed to fix
  #    This lets users opt-in via /autofix once per PR; subsequent CI failures will be gated by the label.
  fix_on_enable:
    if: ${{ (github.event_name == 'issue_comment' && github.event.action == 'created' && github.event.issue.pull_request != null && contains(github.event.comment.body, '/autofix')) || (github.event_name == 'pull_request_review_comment' && github.event.action == 'created' && contains(github.event.comment.body, '/autofix')) || (github.event_name == 'pull_request_review' && github.event.action == 'submitted' && contains(github.event.review.body, '/autofix')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR and head details
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          # Determine PR number depending on triggering event
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER="${{ github.event.issue.number }}"
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          HEAD_SHA=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.head.sha')
          HEAD_REF=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.head.ref')
          echo "pr=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "sha=$HEAD_SHA" >> "$GITHUB_OUTPUT"
          echo "ref=$HEAD_REF" >> "$GITHUB_OUTPUT"

      - name: Ensure 'auto-fix' label exists and add it to PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ steps.pr.outputs.pr }}
          ENABLE_LABEL: ${{ env.ENABLE_LABEL }}
        run: |
          set -euo pipefail
          # Create label if missing
          if ! gh api "repos/$REPO/labels" --paginate --jq '.[].name' | grep -Fxq "$ENABLE_LABEL"; then
            gh api repos/$REPO/labels -f name="$ENABLE_LABEL" -f color="1f883d" -f description="Enable automated CI fixes" >/dev/null
          fi
          # Add label to PR (idempotent)
          gh api repos/$REPO/issues/$PR_NUMBER/labels -f labels='["'"$ENABLE_LABEL"'"]' >/dev/null

      - name: Find latest failed CI run for this commit
        id: run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          CI_WORKFLOW_NAME: ${{ env.CI_WORKFLOW_NAME }}
          HEAD_SHA: ${{ steps.pr.outputs.sha }}
        run: |
          set -euo pipefail
          RUN_ID=$(gh api repos/$REPO/actions/runs --paginate --jq \
            "[.workflow_runs[] | select(.name==env.CI_WORKFLOW_NAME and .head_sha==env.HEAD_SHA)] \
             | sort_by(.created_at) | reverse | .[0].id // empty")
          if [[ -z "$RUN_ID" ]]; then
            echo "found=" >> $GITHUB_OUTPUT
            exit 0
          fi
          CONCLUSION=$(gh api repos/$REPO/actions/runs/$RUN_ID --jq .conclusion)
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "conclusion=$CONCLUSION" >> $GITHUB_OUTPUT

      - name: If CI is not failing, inform and stop
        if: ${{ steps.run.outputs.run_id == '' || steps.run.outputs.conclusion != 'failure' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ steps.pr.outputs.pr }}
          ENABLE_LABEL: ${{ env.ENABLE_LABEL }}
        run: |
          gh api repos/$REPO/issues/$PR_NUMBER/comments -f body=$'Thanks. I added the `auto-fix` label to this PR.\nCurrently I found no failed CI run for the latest commit. I will act automatically on future CI failures because the label is present.' || true

      - name: Checkout failing commit
        if: ${{ steps.run.outputs.run_id != '' && steps.run.outputs.conclusion == 'failure' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.sha }}

      - name: Download raw CI logs and artifacts
        if: ${{ steps.run.outputs.run_id != '' && steps.run.outputs.conclusion == 'failure' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          mkdir -p ci-logs
          echo "Downloading raw run logs ZIP..."
          gh api -H "Accept: application/zip" repos/$REPO/actions/runs/${{ steps.run.outputs.run_id }}/logs > ci-logs/run-logs.zip || {
            echo "No run logs available"; touch ci-logs/run-logs.zip; }
          if command -v unzip >/dev/null 2>&1; then
            unzip -o ci-logs/run-logs.zip -d ci-logs/run-logs || echo "Nothing to unzip"
          else
            echo "unzip not found; attempting bsdtar"
            bsdtar -xf ci-logs/run-logs.zip -C ci-logs/run-logs || echo "Nothing to extract"
          fi
          echo "Downloading artifacts (if any)..."
          gh run download ${{ steps.run.outputs.run_id }} --repo "$REPO" --dir ci-logs/artifacts || echo "No artifacts found"

      - name: Build Claude prompt from context
        if: ${{ steps.run.outputs.run_id != '' && steps.run.outputs.conclusion == 'failure' }}
        id: prompt
        run: |
          {
            echo "prompt<<EOF"
            echo "Context:"
            echo "- CI workflow '${{ env.CI_WORKFLOW_NAME }}' failed for PR #${{ steps.pr.outputs.pr }}."
            echo "- Branch: '${{ steps.pr.outputs.ref }}' | Commit: ${{ steps.pr.outputs.sha }}."
            echo "- The repository is checked out at that commit; CI logs are saved under ./ci-logs."
            echo
            echo "Goal:"
            echo "1) Diagnose the failure using ./ci-logs and repo state."
            echo "2) Implement the smallest safe fix."
            echo "3) Create/Update a branch from '${{ steps.pr.outputs.ref }}', commit changes, and open a PR (or push to this PR) summarizing the root cause and fix."
            echo
            echo "Constraints & guidance:"
            echo "- Follow repository conventions (see CLAUDE.md and AGENTS.md if present)."
            echo "- Update tests/tooling configs as needed to make CI pass."
            echo "- Prefer minimal, targeted changes; avoid large refactors."
            echo "- If a secret/env/config is missing, add the smallest corrective change and document it in the PR."
            echo "- Reference specific failing tests/jobs from the logs in the PR body."
            echo
            echo "Artifacts index (for quick navigation):"
            ls -R ci-logs 2>/dev/null | sed 's/^/  /' || true
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          npm install
          npm run test:install
          npm install -g opencode-ai@latest

      - name: Ask Claude to attempt fix and open PR (OAuth)
        if: ${{ steps.run.outputs.run_id != '' && steps.run.outputs.conclusion == 'failure' }}
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: ${{ steps.prompt.outputs.prompt }}
          base_branch: ${{ steps.pr.outputs.ref }}
          timeout_minutes: "45"
          additional_permissions: |
            actions: read
          # Optional hardening:
          # allowed_tools: |
          #   Bash
          #   Read
          #   Write
          # settings: |
          #   { "model": "claude-3-7-sonnet-20250219" }
